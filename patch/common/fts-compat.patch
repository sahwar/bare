--- a/fts.h
+++ b/fts.h
@@ -113,13 +113,17 @@
 	char fts_name[1];		/* file name */
 } FTSENT;
 
-__BEGIN_DECLS
+#ifdef __cplusplus
+extern "C" {
+#endif
 FTSENT	*fts_children(FTS *, int);
 int	 fts_close(FTS *);
 FTS	*fts_open(char * const *, int,
 	    int (*)(const FTSENT **, const FTSENT **));
 FTSENT	*fts_read(FTS *);
 int	 fts_set(FTS *, FTSENT *, int);
-__END_DECLS
+#ifdef __cplusplus
+}
+#endif
 
 #endif /* !_FTS_H_ */
--- a/fts.c
+++ b/fts.c
@@ -31,6 +31,7 @@
 
 #include <sys/param.h>	/* ALIGN */
 #include <sys/stat.h>
+#include <sys/types.h>
 
 #include <dirent.h>
 #include <errno.h>
@@ -37,7 +37,7 @@
 #include <fcntl.h>
 #include <fts.h>
 #include <limits.h>
-#include <stdlib.h>
+#include <bsd/stdlib.h>
 #include <string.h>
 #include <unistd.h>
 
@@ -43,6 +44,13 @@
 
 #define MAXIMUM(a, b)	(((a) > (b)) ? (a) : (b))
 
+#ifndef ALIGNBYTES
+#define ALIGNBYTES (__alignof__(long double) - 1)
+#endif
+#ifndef ALIGN
+#define ALIGN(p) (((uintptr_t)(p) + ALIGNBYTES) & ~ALIGNBYTES)
+#endif
+
 static FTSENT	*fts_alloc(FTS *, char *, size_t);
 static FTSENT	*fts_build(FTS *, int);
 static void	 fts_lfree(FTSENT *);
@@ -554,6 +563,7 @@
 	int nitems, cderrno, descend, level, nlinks, nostat, doadjust;
 	int saved_errno;
 	char *cp;
+	size_t dnamlen;
 
 	/* Set current node pointer. */
 	cur = sp->fts_cur;
@@ -652,11 +662,12 @@
 		if (!ISSET(FTS_SEEDOT) && ISDOT(dp->d_name))
 			continue;
 
-		if (!(p = fts_alloc(sp, dp->d_name, (size_t)dp->d_namlen)))
+		dnamlen = strlen(dp->d_name);
+		if (!(p = fts_alloc(sp, dp->d_name, dnamlen)))
 			goto mem1;
-		if (dp->d_namlen >= maxlen) {	/* include space for NUL */
+		if (dnamlen >= maxlen) {	/* include space for NUL */
 			oldaddr = sp->fts_path;
-			if (fts_palloc(sp, dp->d_namlen +len + 1)) {
+			if (fts_palloc(sp, dnamlen +len + 1)) {
 				/*
 				 * No more memory for path or structures.  Save
 				 * errno, free up the current structure and the
@@ -683,7 +694,7 @@
 
 		p->fts_level = level;
 		p->fts_parent = sp->fts_cur;
-		p->fts_pathlen = len + dp->d_namlen;
+		p->fts_pathlen = len + dnamlen;
 		if (p->fts_pathlen < len) {
 			/*
 			 * If we wrap, free up the current structure and
